import java.util.*

// Основная функция, которая выполняется при запуске программы
fun main() {
    // Создаем экземпляр Scanner для чтения ввода из консоли
    val scanner = Scanner(System.`in`)
    // Инициализируем список строк для хранения истории транзакций (трат и доходов)
    val history = mutableListOf<String>()
    // Переменная для хранения текущего баланса, изначально 0
    var balance = 0.0

    // Бесконечный цикл для постоянного взаимодействия с пользователем
    while (true) {
        // Выводим меню с доступными командами
        println("1. Показать баланс")
        println("2. Добавить трату (введите положительное число)")
        println("3. Добавить доход (введите положительное число)")
        println("4. Отменить последнее изменение")
        println("5. Показать историю трат и доходов")
        println("6. Выйти")
        print("Введите команду: ")

        // Считываем команду, введенную пользователем
        when (scanner.nextLine()) {
            "1" -> println("Текущий баланс: $balance") // Вывод текущего баланса
            "2" -> {
                print("Введите сумму траты: ")
                // Считываем сумму траты и проверяем, является ли она положительным числом
                val expense = scanner.nextLine().toDoubleOrNull()
                if (expense == null || expense <= 0) {
                    // Вывод ошибки, если введено не число или число не положительное
                    println("Ошибка: введите положительное число")
                } else {
                    // Уменьшаем баланс на сумму траты и добавляем запись в историю
                    balance -= expense
                    history.add("Трата: $expense")
                    println("Трата добавлена")
                }
            }
            "3" -> {
                print("Введите сумму дохода: ")
                // Считываем сумму дохода и проверяем, является ли она положительным числом
                val income = scanner.nextLine().toDoubleOrNull()
                if (income == null || income <= 0) {
                    // Вывод ошибки, если введено не число или число не положительное
                    println("Ошибка: введите положительное число")
                } else {
                    // Увеличиваем баланс на сумму дохода и добавляем запись в историю
                    balance += income
                    history.add("Доход: $income")
                    println("Доход добавлен")
                }
            }
            "4" -> {
                // Отменяем последнее изменение баланса, если история не пуста
                if (history.isNotEmpty()) {
                    // Удаляем последнюю запись из истории и корректируем баланс
                    val lastTransaction = history.removeAt(history.lastIndex)
                    val amount = lastTransaction.split(": ")[1].toDouble()
                    if (lastTransaction.startsWith("Трата")) {
                        // Если последняя запись была тратой, возвращаем сумму на баланс
                        balance += amount
                    } else {
                        // Если последняя запись была доходом, вычитаем сумму из баланса
                        balance -= amount
                    }
                    println("Последнее изменение отменено")
                } else {
                    println("История операций пуста")
                }
            }
            "5" -> {
                // Выводим историю трат и доходов, если она не пуста
                if (history.isEmpty()) {
                    println("История операций пуста")
                } else {
                    println("История трат и доходов:")
                    // Перебираем все записи в истории и выводим их
                    history.forEach { println(it) }
                }
            }
            "6" -> {
                // Команда для выхода из программы
                println("Выход")
                break // Выходим из бесконечного цикла, завершая программу
            }
            else -> {
                // Если введена команда, которая не соответствует ни одной из предложенных
                println("Неподдерживаемая команда. Попробуйте еще раз.")
            }
        }
    }
}
